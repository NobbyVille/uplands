#!/usr/bin/perl

use strict;
use warnings;

use constant DAEMON   => 'flud';
use constant LOG_DIR  => '/var/log/' . DAEMON;
use constant LOG_FILE => DAEMON . '.log';

use Proc::PID::File;
use Proc::Daemon;
use Log::Dispatch;
use Log::Dispatch::File;
use Date::Format;
use File::Spec;

sub dienice ($);
my $interval = 60;	# waiting time (in seconds)
startDaemon();		# fork and background process

# Setup a logging agent
my $log = new Log::Dispatch(
        callbacks => sub {
                my %h = @_;
                return Date::Format::time2str( '%B %e %T', time ) . ' ' . DAEMON . " \[$$]: " . $h{message} . "\n";
        }
);
$log->add(
        Log::Dispatch::File->new(
                name      => 'file1',
                min_level => 'warning',
#                mode      => 'append',
                filename  => File::Spec->catfile( LOG_DIR, LOG_FILE ),
        )
);
$log->warning( "Starting Processing:  " . time() );

# Setup signal handlers so that we have time to cleanup before shutting down
my $keep_going = 1;
$SIG{HUP}  = sub { $log->warning("Caught SIGHUP:  exiting gracefully"); $keep_going = 0; };
$SIG{INT}  = sub { $log->warning("Caught SIGINT:  exiting gracefully"); $keep_going = 0; };
$SIG{QUIT} = sub { $log->warning("Caught SIGQUIT:  exiting gracefully"); $keep_going = 0; };
$SIG{TERM} = sub { $log->warning("Caught SIGTERM:  exiting gracefully"); $keep_going = 0; };

# enter main loop
while ($keep_going) {
    # here the action you want to perform every $interval seconds
    sleep( $interval );
}

# Mark a clean exit in the log
$log->warning( "Stopping Processing:  " . time() );

# startDaemon
# Fork and detach from the parent process
sub startDaemon {
        # Fork and detach from the parent process
        eval { Proc::Daemon::Init; };
        if ($@) {
            $log->warning( "Unable to start daemon:  $@  " . time() );
            dienice("Unable to start daemon:  $@");
        }

        # Get a PID file
        dienice("Already running!") if Proc::PID::File->running();
}

# dienice
# write die messages to the log before die'ing
sub dienice ($) {
    my ( $package, $filename, $line ) = caller;
    $log->critical("$_[0] at line $line in $filename");
    die $_[0];
}
